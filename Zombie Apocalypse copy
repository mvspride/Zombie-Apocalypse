

import numpy as np
from scipy.spatial.distance import pdist, squareform

import matplotlib.pyplot as plt
import scipy.integrate as integrate
import matplotlib.animation as animation

'''class ParticleBox:
    """Orbits class
    
    init_state is an [N x 4] array, where N is the number of particles:
       [[x1, y1, vx1, vy1],
        [x2, y2, vx2, vy2],
        ...               ]

    bounds is the size of the box: [xmin, xmax, ymin, ymax]
    """
    def __init__(self,
                 init_state = [[1, 0, 0, -1],
                               [-0.5, 0.5, 0.5, 0.5],
                               [-0.5, -0.5, -0.5, 0.5]],
                 bounds = [-8, 2, -2, 8],
                 size = 0.04,
                 M = 0.05,
                 G = 9.8):
        self.init_state = np.asarray(init_state, dtype=float)
        self.M = M * np.ones(self.init_state.shape[0])
        self.size = size
        self.state = self.init_state.copy()
        self.time_elapsed = 0
        self.bounds = bounds
        self.G = G

    def step(self, dt):
        """step once by dt seconds"""
        self.time_elapsed += dt
        
        # update positions
        self.state[:, :2] += dt * self.state[:, 2:]

        # find pairs of particles undergoing a collision
        D = squareform(pdist(self.state[:, :2]))
        ind1, ind2 = np.where(D < 2 * self.size)
        unique = (ind1 < ind2)
        ind1 = ind1[unique]
        ind2 = ind2[unique]

        # update velocities of colliding pairs
        for i1, i2 in zip(ind1, ind2):
            # mass
            m1 = self.M[i1]
            m2 = self.M[i2]

            # location vector
            r1 = self.state[i1, :2]
            r2 = self.state[i2, :2]

            # velocity vector
            v1 = self.state[i1, 2:]
            v2 = self.state[i2, 2:]

            # relative location & velocity vectors
            r_rel = r1 - r2
            v_rel = v1 - v2

            # momentum vector of the center of mass
            v_cm = (m1 * v1 + m2 * v2) / (m1 + m2)

            # collisions of spheres reflect v_rel over r_rel
            rr_rel = np.dot(r_rel, r_rel)
            vr_rel = np.dot(v_rel, r_rel)
            v_rel = 2 * r_rel * vr_rel / rr_rel - v_rel

#scit6c            # assign new velocities  xs,b nv.llc bljvgututpg/ggg
            self.state[i1, 2:] = v_cm + v_rel * m2 / (m1 + m2)
            self.state[i2, 2:] = v_cm - v_rel * m1 / (m1 + m2) 

        # check for crossing boundary
        crossed_x1 = (self.state[:, 0] < self.bounds[0] + self.size)
        crossed_x2 = (self.state[:, 0] > self.bounds[1] - self.size)
        crossed_y1 = (self.state[:, 1] < self.bounds[2] + self.size)
        crossed_y2 = (self.state[:, 1] > self.bounds[3] - self.size)

        self.state[crossed_x1, 0] = self.bounds[0] + self.size
        self.state[crossed_x2, 0] = self.bounds[1] - self.size

        self.state[crossed_y1, 1] = self.bounds[2] + self.size
        self.state[crossed_y2, 1] = self.bounds[3] - self.size

        self.state[crossed_x1 | crossed_x2, 2] *= -1
        self.state[crossed_y1 | crossed_y2, 3] *= -1

        # add gravity
        self.state[:, 3] -= self.M * self.G * dt


#------------------------------------------------------------
# set up initial state
np.random.seed(0)
init_state = -0.5 + np.random.random((50, 4))
init_state[:, :2] *= 3.9

box = ParticleBox(init_state, size=0.04)
dt = 1. / 30 # 30fps


#------------------------------------------------------------
# set up figure and animation
fig = plt.figure()
fig.subplots_adjust(left=0, right=1, bottom=0, top=1)
ax = fig.add_subplot(111, aspect='equal', autoscale_on=False,
                     xlim=(-3.2, 3.2), ylim=(-2.4, 2.4))

# particles holds the locations of the particles
particles, = ax.plot([], [], 'bo', ms=6)

# rect is the box edge
rect = plt.Rectangle(box.bounds[::2],
                     box.bounds[1] - box.bounds[0],
                     box.bounds[3] - box.bounds[2],
                     ec='none', lw=2, fc='none')
ax.add_patch(rect)

def init():
    """initialize animation"""
    global box, rect
    particles.set_data([], [])
    rect.set_edgecolor('none')
    return particles, rect

def animate(i):
    """perform animation step"""
    global box, rect, dt, ax, fig
    box.step(dt)

    ms = int(fig.dpi * 2 * box.size * fig.get_figwidth()
             / np.diff(ax.get_xbound())[0])
    
    # update pieces of the animation
    rect.set_edgecolor('k')
    particles.set_data(box.state[:, 0], box.state[:, 1])
    particles.set_markersize(ms)
    return particles, rect

ani = animation.FuncAnimation(fig, animate, frames=1,
                              interval=10, blit=True, init_func=init)


# save the animation as an mp4.  This requires ffmpeg or mencoder to be
# installed.  The extra_args ensure that the x264 codec is used, so that
# the video can be embedded in html5.  You may need to adjust this for
# your system: for more information, see
# http://matplotlib.sourceforge.net/api/animation_api.html
#ani.save('particle_box.mp4', fps=30, extra_args=['-vcodec', 'libx264'])

plt.show()
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

Created on Sat Apr 25 17:08:14 2020

@author: pmmbabittebit19@students.desu.edu
'''
#%matplotlib qt
import time
import matplotlib.pyplot as plt
import random
import matplotlib
from colorama import Fore, Back, Style
from matplotlib.font_manager import FontProperties

'''Sus = Susceptible
   Inj = Injured
   Inf = Infected'''

print("")
trapx =[]
trapy =[]

'''If user tries to defy me then boundary is set to 6'''

boundary = [0,0]
boundary[0]=int("{}".format(input("boundary x has to be greater than 5 :")))
if boundary[0] <= 5:
    boundary[0] = 6
    print("bountday x is {}".format(6))
boundary[1]= int("{}".format(input("boundary y has to be greater than 5 :")))
if boundary[1] <= 5:
    boundary[1] = 6
    print("bountday y is {}".format(6))
    
if boundary[0]>boundary[1]:
    highest = boundary[0]
    lowest = boundary[1]
else:
    highest =boundary[1]
    lowest =boundary[0]
'''the number of traps is equal to either boundary[0] or  boundary[1], which ever is higher'''
for i in range(highest):
    trapx.append(random.randint(0,highest))
    trapy.append(random.randint(0,lowest))

trapLocations = [0]*len(trapx)

for i in range(len(trapx)):
    trapLocations[i]= trapx[i],trapy[i]
                


class Person():
  
    def __init__(self):
        
         
        self.age = random.randint(18, 70)
        #sets the x and y location of every one to random numbers between the boundaries
        self.location = [
            random.randrange(0, boundary[0]),
            random.randrange(0, boundary[1])]  
        self.health = 10
        self.onTrap = False
        
 
    def takeDamage(self, damage):
        self.health -= damage
        
    '''Trapped() compares the location of the traps and the location of each person
       If they land on a trap and are not Susceptible, the lose 50 health
       If they are susceptible then they have a chance of dodging the trap'''
    
    def trapped(self):    
        for j in trapLocations: 
                if self.location[0] == j[0] and self.location[1] == j[1]:
                    self.onTrap = True
                    if self.__class__ == Sus:  
                        pass 
                    else: 
                        self.health -= 50
                        
    '''move(self) basically moves everyone to a new location determined by their 
       health and age and checks if they have crossed the boundary of the terrain 
       If they have then their new location becomes the boundary of the terrain'''

    def move(self): 
        if self.age <= 45 and self.health >=50 :       
        
            self.location[0] += random.randint(-5,5)
            
            if self.location[0] > boundary[0]:   
                self.location[0] = boundary[0] 
            elif self.location[0] < 0: 
                self.location[0] =0 
          
        
            self.location[1] += random.randint(-5,5) 
          
            if self.location[1] >boundary[1]:   
                self.location[1] = boundary[1] 
            elif self.location[1] < 0: 
                self.location[1] =0 
          
        elif self.age <= 45 and self.health <= 50:  
            
            self.location[0] += random.randint(-4,4)             
          
            if self.location[0] > boundary[0]:   
                self.location[0] = boundary[0] 
            elif self.location[0] < 0: 
                self.location[0] =0 
        
            self.location[1] += random.randint(-4,4) 
        
            if self.location[1] >boundary[1]:   
                self.location[1] = boundary[1] 
            elif self.location[1] <0:
                self.location[1] =0 
              
        elif self.age >= 45 and self.health >= 50: 
             
            self.location[0] += random.randint(-3,3)  
          
            if self.location[0] > boundary[0]:   
                self.location[0] = boundary[0] 
            elif self.location[0] < 0:
                self.location[0] =0 
        
            self.location[1] += random.randint(-3,3) 
        
            if self.location[1] >boundary[1]:   
                self.location[1] = boundary[1] 
            elif self.location[1] <0:
                self.location[1] =0 
          
          
        elif self.age >= 45 and self.health <= 50: 
            
            self.location[0] += random.randint(-2,2)  
          
            if self.location[0] > boundary[0]:   
                self.location[0] = boundary[0] 
            elif self.location[0] < 0:
                self.location[0] =0 
          
            self.location[1] += random.randint(-2,2) 
          
            if self.location[1] > boundary[1]:   
                self.location[1] = boundary[1] 
            elif self.location[1] <0:
                self.location[1] =0 
        
class Sus(Person): 
    def __init__(self): 
        super().__init__()      # assigns all Person() attributes and methods to Sus() class     
        self.health = 100      #Overide the health variable by setting it to 100                  
        
    def checkForTrap(self):
        return self.onTrap
    
    def DodgeObstacles(self):       
        y = random.randint(0,12)             
        if y % 4 == 0:  
            return True 
        else:                                 
            return False 
    def checkAttack():
        return Inf.Attack() 

class Inj(Person): 
    def __init__(self): 
        super().__init__()  
        self.health= 50                            
    def rest(self):               
        y = random.randint(0,11)          
        if y % 6 ==0: 
            self.health += 20   
            return True
        
class Inf(Person): 
    def __init__(self): 
        super().__init__()  
        self.health = 100               
  
    def Elixir(self): 
        y = random.randint(0,12)    
        if y  == 6:  
            if self.health <= 70: 
                self.health += 30 
    def Attack(self):  

        if Sus().location == self.location:  
            #The susceptable person is removed from the list of Sus()
            #The person is then added to the list of Infected 
            return True
        elif Inj().location == self.location: 

            CountInf.append(self)
            return True
            
             #The person is then added to the array of Infected 

'''limit determines how many people for each class you are allowed to set 
   That is determined by the X by Y boundary. By multiplying both x and y boundary
   you know how many possible positions can be plotted on the plane
   By subtracting highest, multiplying 80 and dividing by 100, you know 80% of the remaining 
   positions excluding the traps. Now you simply divide by 3 for Inf, Sus,Inj'''
   
limit = ((((boundary[0]*boundary[1])-highest)*80)//100)//3

numSus =int("{}".format(input("input number of Sus must be less than {} :".format(limit))))
if numSus > limit:  #sets numSus to limit if the inputed number is above limit
    numSus = limit
    print("number of Sus is {}".format(limit))
numInf = int("{}".format(input("input number of Inf must be less than {} :".format(limit))))
if numInf > limit:
    numInf = limit
    print("number of Inf is {}".format(limit))
numInj = int("{}".format(input("input number of Inj must be less than {} :".format(limit))))
if numInj > limit:
    numInj = limit
    print("number of Inj is {}".format(limit))

CountSus =[] 
CountInf= [] 
CountInj= [] 
susx = []
susy =[]
infx =[]
infy =[]
injx=[]
injy =[]

def main(): # runs the whole simulation

    for i in range(numSus):  #creates objects of class Sus() and adds it to CountSus[]
        CountSus.append(Sus())
        susx.append(CountSus[i].location[0])
        susy.append(CountSus[i].location[1])
        
    for i in range(numInf):
        CountInf.append(Inf())
        infx.append(CountInf[i].location[0])
        infy.append(CountInf[i].location[1])
    
    for i in range(numInj):
        CountInj.append(Inj())
        injx.append(CountInj[i].location[0])
        injy.append(CountInj[i].location[1])
  
   
   
   
    CountRem = 0
    start =time.time()
    graphSus = []
    graphInf =[]
    graphInj =[]
    while  len(CountSus)+len(CountInj)>0 :
        
        del susx[:]      #deletes all elements in susx
        del susy[:]
        del injx[:]
        del injy[:]
        del infx[:]
        del infy[:]
        ''' for every person in its designated CountClass checks for traps, moves to a new
            location... If their health gets below 0 then they are removed'''
        for per in CountSus:          
            per.trapped()
            per.move()
            if per.checkAttack:
                CountSus.remove(per)
            if per.checkForTrap():
                if per.DodgeObstacles():
                    pass
                else:
                    per.takeDamage(50)
            if per.health <= 0 :
                CountSus.remove(per)
                CountRem += 1
            else:     # gets all the survivors of the first round location
                susx.append(per.location[0]) 
                susy.append(per.location[1])
        
        for per in CountInf:                   
            per.trapped()
            per.move()
            per.Elixir()
            if per.Attack():
                CountInf.append(Inf())
            if per.health <=0 :
                CountInf.remove(per)
                CountRem +=1 
            else:     # gets all the survivors of the first round location
                infx.append(per.location[0])
                infy.append(per.location[1])
                
        for per in CountInj:                   
            per.trapped()
            if per.rest():
                pass
            else:
                per.move()
            if per.health <=0 : 
                CountRem +=1
                CountInj.remove(per)
            else:    # gets all the survivors of the first round location
                injx.append(per.location[0])
                injy.append(per.location[1])
    
        '''records number of survivors for each round '''
     
        graphSus.append(len(CountSus))
        graphInf.append(len(CountInf))
        graphInj.append(len(CountInj))
        
        '''plots every survivor on the scatter plot for each round''' 
        
        plt.scatter(susx,susy,c='b',marker='.',label='sus') 
        plt.scatter(injx,injy,c='r',marker='.',label='inj')
        plt.scatter(infx,infy,c='y',marker='.',label='inf')
        plt.scatter(trapx,trapy,c='k',marker='x',label ='traps')
        ax = plt.subplot(111)
        ax.legend(loc='upper center', bbox_to_anchor=(0.5, -0.05),
          fancybox=True, shadow=True, ncol=5)
        plt.show()
        
        '''bc it lags when it is iterating, the pause time is set determining
           on the amount of ppl left'''
        
        if len(CountSus)+len(CountInj)+len(CountInf) > 30:
            time.sleep(.6) #pauses code for x amount of time before continuing 
        else:
            time.sleep(.1)
        #input("Press Enter to continue...")
         
        #print(".",end=" ") # records module progression by printing a dot after every round
        
        
    stop=time.time()  # stops the timer
    time1 =round(stop-start)
    print("\nIt took {} seconds to complete the loop".format(time1))
    print("{} Susceptibles left".format(len(CountSus)))
    print("{} Injured left".format(len(CountInj)))
    print("{} Infected left".format(len(CountInf)))
    print("\n{} where removed".format(CountRem))
    
    ''' graphs the recorded survivors from lines 287 - 289'''
    
    plot = matplotlib.pyplot
    plot.plot(graphSus,label ="Susceptable")
    plot.plot(graphInf,label ="Infected")
    plot.plot(graphInj,label ="Injured")
    time.sleep(3)  # waits x seconds before showing the graph
    plot.legend()
    plot.show()
    

Main=main() 

